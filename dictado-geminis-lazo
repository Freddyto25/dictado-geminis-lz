<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Dictado Géminis LZ</title>
  <style>
    /* Contenedor principal */
    .container {
      max-width: 600px;
      margin: 0 auto;
      padding: 20px;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      color: #333;
    }

    h1 {
      text-align: center;
      margin-bottom: 30px;
      font-size: 2rem;
      font-weight: 600;
    }

    /* Área de botones de control */
    .controls {
      display: flex;
      justify-content: center;
      gap: 15px;
      margin-bottom: 20px;
      flex-wrap: wrap;
    }

    button {
      padding: 12px 20px;
      font-size: 1rem;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      transition: background-color 0.3s ease;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    button:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }

    /* Botones primarios */
    .primary-btn {
      background-color: #005f99;
      color: #fff;
    }
    .primary-btn:hover:not(:disabled) {
      background-color: #004f7a;
    }

    /* Botón secundario */
    .secondary-btn {
      background-color: #e0e0e0;
      color: #333;
    }
    .secondary-btn:hover:not(:disabled) {
      background-color: #c8c8c8;
    }

    /* Salida de texto */
    #output {
      margin-top: 20px;
      font-size: 1.125rem;
      min-height: 50px;
      white-space: pre-wrap;
      background-color: #f9f9f9;
      padding: 15px;
      border-radius: 8px;
      box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    /* Mensaje de texto copiado */
    #copy-msg {
      color: #1b5e20;
      margin-top: 10px;
      font-size: 0.9rem;
      opacity: 0;
      transition: opacity 0.5s ease;
      text-align: center;
    }
    #copy-msg.visible {
      opacity: 1;
    }

    /* Sección de API */
    #toggle-api-btn {
      display: block;
      width: 100%;
      margin: 30px auto 10px auto;
    }

    .api-section {
      display: none;
      margin-bottom: 20px;
      animation: fadeIn 0.4s ease;
    }

    #api-key-input {
      width: 100%;
      padding: 10px;
      font-size: 1rem;
      border: 1px solid #ccc;
      border-radius: 6px;
      margin-bottom: 10px;
      box-sizing: border-box;
    }

    #save-api-btn {
      width: 100%;
      background-color: #00796b;
      color: #fff;
    }
    #save-api-btn:hover {
      background-color: #006755;
    }

    /* Mensaje de confirmación de API */
    #api-msg {
      margin-top: 10px;
      padding: 10px;
      background-color: #e8f5e9;
      color: #2e7d32;
      border: 1px solid #c8e6c9;
      border-radius: 6px;
      font-size: 0.9rem;
      text-align: center;
      opacity: 0;
      transition: opacity 0.4s ease;
    }
    #api-msg.visible {
      opacity: 1;
    }

    /* Enlace de Telegram */
    #telegram-link {
      display: inline-block;
      margin-top: 30px;
      padding: 12px 20px;
      background-color: #2aabee;
      color: #fff;
      font-weight: bold;
      text-decoration: none;
      border-radius: 8px;
      text-align: center;
      transition: background-color 0.3s ease;
      width: 100%;
      box-sizing: border-box;
    }
    #telegram-link:hover {
      background-color: #1c8ac9;
    }

    /* Animación de aparición */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    /* Adaptación para móviles */
    @media (max-width: 480px) {
      h1 {
        font-size: 1.5rem;
      }
      button {
        font-size: 0.9rem;
        padding: 10px 16px;
      }
      #output {
        font-size: 1rem;
      }
      #api-key-input {
        font-size: 0.9rem;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Dictado Géminis LZ</h1>

    <div class="controls">
      <button id="start-btn" class="primary-btn">Haz clic y empieza a hablar</button>
      <button id="stop-btn" class="secondary-btn" disabled>Haz clic para detener y copiar al portapapeles</button>
    </div>

    <div id="output"></div>
    <div id="copy-msg">¡Texto corregido y copiado al portapapeles!</div>

    <!-- Botón para mostrar/ocultar la sección de API -->
    <button id="toggle-api-btn" class="primary-btn">Actualizar Clave de API</button>

    <!-- Sección que contiene el campo de edición y botón de guardar -->
    <div id="api-section" class="api-section">
      <input type="text" id="api-key-input" placeholder="Ingresa tu clave de API de Gemini (AIza...)" />
      <button id="save-api-btn">Guardar Clave</button>
      <div id="api-msg">¡Clave de API guardada correctamente!</div>
    </div>

    <a id="telegram-link" href="https://t.me/lazoaccesible" target="_blank">Grupo de Soporte Visión Digital</a>
  </div>

  <script>
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;

    const apiKeyInput = document.getElementById('api-key-input');
    const saveApiBtn = document.getElementById('save-api-btn');
    const toggleApiBtn = document.getElementById('toggle-api-btn');
    const apiSection = document.getElementById('api-section');
    const apiMsg = document.getElementById('api-msg');

    const startBtn = document.getElementById('start-btn');
    const stopBtn = document.getElementById('stop-btn');
    const outputDiv = document.getElementById('output');
    const copyMsg = document.getElementById('copy-msg');

    let isListening = false;
    let fullTranscript = '';

    const getApiKey = () => localStorage.getItem('gemini_api_key') || '';
    const setApiKey = (key) => localStorage.setItem('gemini_api_key', key);

    window.addEventListener('DOMContentLoaded', () => {
      const existingKey = getApiKey();
      if (existingKey) {
        apiKeyInput.value = existingKey;
      }
      // Si ya existe clave, mantenemos la sección oculta; si no, la mostramos automáticamente
      if (!existingKey) {
        apiSection.style.display = 'block';
      }
    });

    toggleApiBtn.addEventListener('click', () => {
      if (apiSection.style.display === 'block') {
        apiSection.style.display = 'none';
      } else {
        apiSection.style.display = 'block';
        apiKeyInput.focus();
      }
    });

    saveApiBtn.addEventListener('click', () => {
      const key = apiKeyInput.value.trim();
      if (key.startsWith('AIza') && key.length > 30) {
        setApiKey(key);
        apiMsg.classList.add('visible');
        // Después de guardar, cerramos la sección y mostramos el botón
        setTimeout(() => {
          apiMsg.classList.remove('visible');
          apiSection.style.display = 'none';
        }, 2000);
      } else {
        // Si la clave no es válida, mostramos el mismo mensaje de error en el campo
        apiMsg.textContent = 'Clave no válida. Debe comenzar con "AIza" y tener suficiente longitud.';
        apiMsg.style.backgroundColor = '#ffebee';
        apiMsg.style.color = '#c62828';
        apiMsg.style.border = '1px solid #ef9a9a';
        apiMsg.classList.add('visible');
        setTimeout(() => {
          apiMsg.classList.remove('visible');
          // Restauramos el estilo original del mensaje para la próxima vez
          apiMsg.textContent = '¡Clave de API guardada correctamente!';
          apiMsg.style.backgroundColor = '#e8f5e9';
          apiMsg.style.color = '#2e7d32';
          apiMsg.style.border = '1px solid #c8e6c9';
        }, 2500);
      }
    });

    if (!SpeechRecognition) {
      outputDiv.textContent = 'Lo sentimos, tu navegador no admite reconocimiento de voz.';
      startBtn.disabled = true;
      stopBtn.disabled = true;
    } else {
      const recognition = new SpeechRecognition();
      recognition.lang = 'es-ES';
      recognition.interimResults = false;
      recognition.maxAlternatives = 1;
      recognition.continuous = true;

      startBtn.addEventListener('click', () => {
        const key = getApiKey();
        if (!key) {
          // Si no hay clave guardada, abrimos la sección de API
          apiSection.style.display = 'block';
          return;
        }

        isListening = true;
        fullTranscript = '';
        startBtn.disabled = true;
        stopBtn.disabled = false;
        copyMsg.classList.remove('visible');
        outputDiv.textContent = 'Escuchando... Por favor, habla ahora.';
        recognition.start();
      });

      stopBtn.addEventListener('click', async () => {
        isListening = false;
        recognition.stop();
        startBtn.disabled = false;
        stopBtn.disabled = true;

        const rawText = fullTranscript.trim();
        if (!rawText) {
          outputDiv.textContent = 'No se reconoció ningún discurso.';
          return;
        }

        outputDiv.textContent = 'Corrigiendo el texto...';

        const apiKey = getApiKey();

        try {
          const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              contents: [{
                parts: [{
                  text: "Corrige gramaticalmente este texto y devuélvelo corregido sin explicaciones ni comentarios: " + rawText
                }]
              }]
            })
          });

          const data = await response.json();

          if (!data.candidates || !data.candidates[0] || !data.candidates[0].content || !data.candidates[0].content.parts || !data.candidates[0].content.parts[0].text) {
            throw new Error('La API no devolvió una respuesta válida.');
          }

          const correctedText = data.candidates[0].content.parts[0].text.trim();
          outputDiv.textContent = correctedText;

          try {
            await navigator.clipboard.writeText(correctedText);
            copyMsg.classList.add('visible');
            setTimeout(() => copyMsg.classList.remove('visible'), 3000);
          } catch (err) {
            console.error('Error al copiar al portapapeles:', err);
          }

        } catch (err) {
          outputDiv.textContent = 'Error con la API: ' + err.message;
          console.error(err);
        }
      });

      recognition.onresult = (event) => {
        const spokenText = event.results[event.results.length - 1][0].transcript.trim();
        const finalText = spokenText.endsWith('.') ? spokenText : spokenText + '.';
        fullTranscript += finalText + ' ';
        outputDiv.textContent = fullTranscript;
      };

      recognition.onerror = (event) => {
        outputDiv.textContent = `Ocurrió un error: ${event.error}. Intenta nuevamente.`;
        isListening = false;
        startBtn.disabled = false;
        stopBtn.disabled = true;
      };

      recognition.onend = () => {
        if (isListening) {
          recognition.start();
        } else {
          startBtn.disabled = false;
          stopBtn.disabled = true;
        }
      };
    }
  </script>
</body>
</html>Enter file contents here
